---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  driftDetection:
    mode: enabled
  dependsOn:
    - name: ingress-nginx
      namespace: ingress-nginx
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 75.13.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m
  values:
    alertmanager:
      config:
        global:
          resolve_timeout: 15m
        receivers:
          - name: blackhole
          - name: slack
            slack_configs:
              - channel: "#alertmanager"
                send_resolved: true
                text: |2-
                  {{ range .Alerts }}
                    *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
                    *Description:* {{ .Annotations.description }}
                    *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
                title:
                  '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing
                  | len }}{{ end }}] Monitoring Event Notification'
        route:
          group_by:
            - job
          group_interval: 5m
          group_wait: 90s
          receiver: slack
          repeat_interval: 2h
          routes:
            - receiver: blackhole
              matchers:
                - alertname = Watchdog
            - receiver: blackhole
              matchers:
                - severity =~ none|info
            - receiver: slack
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: ${LAN_NETWORK_RANGE_V4},${LAN_NETWORK_RANGE_V6},${POD_NETWORK_RANGE_V4},${POD_NETWORK_RANGE_V6}
        enabled: true
        ingressClassName: nginx
        hosts:
          - alertmanager.local.${BASE_DOMAIN}
        pathType: Prefix
        paths:
          - /
    defaultRules:
      rules:
        etcd: false
    grafana:
      assertNoLeakedSecrets: false
      defaultDashboardsTimezone: browser
      grafana.ini:
        security:
          disable_initial_admin_creation: true
        auth:
          disable_login_form: true
          oauth_auto_login: true
        auth.basic:
          enabled: false
        auth.generic_oauth:
          client_id: $__file{/etc/secrets/auth_generic_oauth/client_id}
          client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}
          allow_sign_up: true
          enabled: true
          name: ${BASE_DOMAIN} SSO
          auth_url: https://sso.${BASE_DOMAIN}/realms/master/protocol/openid-connect/auth
          token_url: https://sso.${BASE_DOMAIN}/realms/master/protocol/openid-connect/token
          api_url: https://sso.${BASE_DOMAIN}/realms/master/protocol/openid-connect/userinfo
          scopes: openid profile email
          signout_redirect_url: https://sso.${BASE_DOMAIN}/realms/master/protocol/openid-connect/logout
          role_attribute_path: contains(roles[*], 'admins') && 'Admin' || 'Viewer'
        server:
          root_url: https://grafana.local.${BASE_DOMAIN}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: ${LAN_NETWORK_RANGE_V4},${LAN_NETWORK_RANGE_V6},${POD_NETWORK_RANGE_V4},${POD_NETWORK_RANGE_V6}
        enabled: true
        ingressClassName: nginx
        hosts:
          - grafana.local.${BASE_DOMAIN}
        pathType: Prefix
        paths:
          - /
      extraSecretMounts:
        - name: grafana-auth-generic-oauth
          secretName: grafana-auth-generic-oauth
          defaultMode: 0440
          mountPath: /etc/secrets/auth_generic_oauth
          readOnly: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - ${HOST_IP_V4}
        - ${HOST_IP_V6}
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: true
      endpoints:
        - ${HOST_IP_V4}
        - ${HOST_IP_V6}
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheus:
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: ${LAN_NETWORK_RANGE_V4},${LAN_NETWORK_RANGE_V6},${POD_NETWORK_RANGE_V4},${POD_NETWORK_RANGE_V6}
        enabled: true
        ingressClassName: nginx
        hosts:
          - prometheus.local.${BASE_DOMAIN}
        pathType: Prefix
        paths:
          - /
      prometheusSpec:
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 10Gi
    prometheus-node-exporter:
      extraArgs:
        - --collector.filesystem.ignored-mount-points=^/(mnt|dev|proc|sys|var/lib/docker/.+)($|/)
    prometheusOperator:
      serviceMonitor:
        sampleLimit: 0
  valuesFrom:
    - kind: Secret
      name: kube-prometheus-stack-helm-values
      optional: false
  install:
    crds: Skip
  upgrade:
    crds: Skip
